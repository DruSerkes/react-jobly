{"version":3,"sources":["JoblyApi.js","Context.js","JobCard.js","Company.js","CompanyCard.js","forms/TextInput.js","Search.js","Companies.js","Jobs.js","forms/LoginFormSchema.js","forms/LoginForm.js","forms/registrationSchema.js","forms/RegistrationForm.js","Login.js","Home.js","forms/profileSchema.js","Profile.js","Routes.js","Navbar.js","App.js","serviceWorker.js","index.js"],"names":["jwt","require","JoblyApi","endpoint","paramsOrData","verb","_token","localStorage","getItem","console","debug","axios","method","url","data","error","response","message","Array","isArray","handle","this","request","res","company","log","params","companies","jobs","token","decoded","decode","username","user","job","currentUser","id","updatedUser","React","createContext","JobCard","useContext","userContext","setCurrentUser","handleApply","a","apply","forEach","j","applied","className","title","salary","equity","onClick","Company","useState","setCompany","useParams","useEffect","getCompany","name","description","map","key","CompanyCard","src","logo_url","alt","TextInput","label","props","useField","field","meta","htmlFor","touched","Search","handleSearch","initialValues","search","onSubmit","placeholder","Companies","setCompanies","getAllCompanies","getCompanies","values","setSubmitting","length","to","Jobs","setJobs","getAllJobs","getJobs","loginSchema","Yup","required","password","LoginForm","doLogin","handleLogin","login","setItem","validationSchema","type","registrationSchema","min","firstName","lastName","email","RegistrationForm","handleRegister","register","first_name","last_name","Login","formView","setFormView","history","useHistory","push","changeForm","e","target","classList","contains","toggle","previousElementSibling","nextElementSibling","Home","profileSchema","photo_url","Profile","INITIAL_VALUES","handleSubmit","value","resetForm","updateUser","Routes","exact","path","Navbar","isLoggedIn","setisLoggedIn","removeItem","App","getUser","checkCurrentUser","Provider","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.f24abde2.chunk.js","sourcesContent":["import axios from 'axios';\nconst jwt = require('jsonwebtoken');\n\nclass JoblyApi {\n\tstatic async request(endpoint, paramsOrData = {}, verb = 'get') {\n\t\t// paramsOrData._token = // for now, hardcode token for \"testing\"\n\t\t// \t'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InRlc' +\n\t\t// \t'3RpbmciLCJpc19hZG1pbiI6ZmFsc2UsImlhdCI6MTU1MzcwMzE1M30.' +\n\t\t// \t'COmFETEsTxN_VfIlgIKw0bYJLkvbRQNgO1XCSE8NZ0U';\n\n\t\tparamsOrData._token = localStorage.getItem('jobly-token') || null;\n\n\t\tconsole.debug('API Call:', endpoint, paramsOrData, verb);\n\t\ttry {\n\t\t\treturn (await axios({\n\t\t\t\tmethod                               : verb,\n\t\t\t\turl                                  :\n\t\t\t\t\t`https://serkules-jobly.herokuapp.com/${endpoint}` || `http://localhost:3001/${endpoint}`,\n\t\t\t\t[verb === 'get' ? 'params' : 'data']: paramsOrData\n\t\t\t})).data;\n\t\t\t// axios sends query string data via the \"params\" key,\n\t\t\t// and request body data via the \"data\" key,\n\t\t\t// so the key we need depends on the HTTP verb\n\t\t} catch (err) {\n\t\t\tconsole.error('API Error:', err.response);\n\t\t\tlet message = err.response.data.message;\n\t\t\tthrow Array.isArray(message) ? message : [ message ];\n\t\t}\n\t}\n\n\tstatic async getCompany(handle) {\n\t\ttry {\n\t\t\tlet res = await this.request(`companies/${handle}`);\n\t\t\treturn res.company;\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t\treturn e;\n\t\t}\n\t}\n\n\tstatic async getAllCompanies(params = null) {\n\t\ttry {\n\t\t\tif (params) {\n\t\t\t\tlet res = await this.request(`companies`, params);\n\t\t\t\treturn res.companies;\n\t\t\t} else {\n\t\t\t\tlet res = await this.request(`companies`);\n\t\t\t\treturn res.companies;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t\treturn e;\n\t\t}\n\t}\n\n\tstatic async getAllJobs(params = null) {\n\t\ttry {\n\t\t\tif (params) {\n\t\t\t\tlet res = await this.request(`jobs`, params);\n\t\t\t\treturn res.jobs;\n\t\t\t} else {\n\t\t\t\tlet res = await this.request('jobs');\n\t\t\t\treturn res.jobs;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t\treturn e;\n\t\t}\n\t}\n\n\tstatic async login(data) {\n\t\ttry {\n\t\t\tlet res = await this.request('login', data, 'post');\n\t\t\treturn res.token;\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t\treturn e;\n\t\t}\n\t}\n\n\tstatic async register(data) {\n\t\ttry {\n\t\t\tlet res = await this.request('users', data, 'post');\n\t\t\treturn res.token;\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t\treturn e;\n\t\t}\n\t}\n\n\tstatic async getUser(token) {\n\t\ttry {\n\t\t\tlet decoded = jwt.decode(token);\n\t\t\tlet res = await this.request(`users/${decoded.username}`);\n\t\t\treturn res.user;\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t\treturn e;\n\t\t}\n\t}\n\n\tstatic async updateUser(data) {\n\t\ttry {\n\t\t\tconst { username } = data;\n\t\t\tdelete data.username;\n\t\t\tlet res = await this.request(`users/${username}`, data, 'patch');\n\t\t\treturn res.user;\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t\treturn e;\n\t\t}\n\t}\n\n\tstatic async apply(job, currentUser) {\n\t\ttry {\n\t\t\tconst { username } = currentUser;\n\t\t\tlet res = await this.request(`jobs/${job.id}/apply`, job, 'post');\n\t\t\tlet updatedUser = await this.request(`users/${username}`);\n\t\t\treturn [ res.message, updatedUser.user ];\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t\treturn e;\n\t\t}\n\t}\n}\n\nexport default JoblyApi;\n","import React from 'react';\n\nexport default React.createContext();\n","import React, { useContext } from 'react';\nimport './JobCard.css';\nimport userContext from './Context';\nimport JoblyApi from './JoblyApi';\n\nconst JobCard = ({ job }) => {\n\tconst { currentUser, setCurrentUser } = useContext(userContext);\n\tconst handleApply = async () => {\n\t\ttry {\n\t\t\tconst [ message, updatedUser ] = await JoblyApi.apply(job, currentUser);\n\t\t\tif (message === 'applied') setCurrentUser(updatedUser);\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t}\n\t};\n\n\tcurrentUser.jobs.forEach((j) => {\n\t\tif (j.id === job.id) {\n\t\t\tjob.applied = true;\n\t\t}\n\t});\n\n\treturn (\n\t\t<div className=\"JobCard\">\n\t\t\t<div className=\"JobCard-Info\">\n\t\t\t\t<h3>{job.title}</h3>\n\t\t\t\t<ul>\n\t\t\t\t\t<li>Salary: {job.salary}</li>\n\t\t\t\t\t<li>Equity: {job.equity}</li>\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t\t{job.applied ? (\n\t\t\t\t<button className=\"JobCard-Apply disabled\" onClick={() => null}>\n\t\t\t\t\tApplied\n\t\t\t\t</button>\n\t\t\t) : (\n\t\t\t\t<button className=\"JobCard-Apply\" onClick={handleApply}>\n\t\t\t\t\tApply\n\t\t\t\t</button>\n\t\t\t)}\n\t\t</div>\n\t);\n};\n\nexport default JobCard;\n","import React, { useState, useEffect } from 'react';\nimport JoblyApi from './JoblyApi';\nimport { useParams } from 'react-router-dom';\nimport Jobcard from './JobCard';\nimport './Company.css';\n\nconst Company = () => {\n\tconst [ company, setCompany ] = useState(null);\n\tconst { handle } = useParams();\n\n\tuseEffect(\n\t\t() => {\n\t\t\tconst getCompany = async () => {\n\t\t\t\tlet company = await JoblyApi.getCompany(handle);\n\t\t\t\tsetCompany({ ...company });\n\t\t\t};\n\t\t\tgetCompany();\n\t\t},\n\t\t[ handle ]\n\t);\n\n\tif (!company) {\n\t\treturn <h2>Loading company data</h2>;\n\t}\n\n\treturn (\n\t\t<div className=\"Company\">\n\t\t\t<h3>{company.name}</h3>\n\t\t\t<p>{company.description}</p>\n\t\t\t<ul>\n\t\t\t\t{company.jobs.map((job) => (\n\t\t\t\t\t<li key={job.id}>\n\t\t\t\t\t\t<Jobcard job={job} />\n\t\t\t\t\t</li>\n\t\t\t\t))}\n\t\t\t</ul>\n\t\t</div>\n\t);\n};\n\nexport default Company;\n","import React from 'react';\nimport './CompanyCard.css';\n\nconst CompanyCard = ({ company }) => {\n\treturn (\n\t\t<div className=\"CompanyCard\">\n\t\t\t<h3>\n\t\t\t\t<span>{company.name}</span>\n\t\t\t\t<img src={company.logo_url} alt={company.name} />\n\t\t\t</h3>\n\t\t\t<p>{company.description}</p>\n\t\t</div>\n\t);\n};\n\nexport default CompanyCard;\n","import React from 'react';\nimport { useField } from 'formik';\n\nconst TextInput = ({ label, ...props }) => {\n  // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\n  // which we can spread on <input> and also replace ErrorMessage entirely.\n  const [field, meta] = useField(props);\n  return (\n    <>\n      <label htmlFor={props.id || props.name}>{label}</label>\n      <input className=\"text-input\" {...field} {...props} />\n      {meta.touched && meta.error ? (\n        <div className=\"error\">{meta.error}</div>\n      ) : null}\n    </>\n  );\n};\n\nexport default TextInput","import React from 'react';\nimport { Formik, Form } from 'formik';\nimport TextInput from './forms/TextInput';\nimport './Search.css';\n\nconst Search = ({ handleSearch }) => {\n\tconst INITIAL_VALUES = {\n\t\tsearch : ''\n\t};\n\n\treturn (\n\t\t<div className=\"Search\">\n\t\t\t<Formik initialValues={INITIAL_VALUES} onSubmit={handleSearch}>\n\t\t\t\t<Form>\n\t\t\t\t\t<TextInput placeholder=\"Enter search term...\" name=\"search\" />\n\t\t\t\t\t<button>Submit</button>\n\t\t\t\t</Form>\n\t\t\t</Formik>\n\t\t</div>\n\t);\n};\n\nexport default Search;\n","import React, { useState, useEffect } from 'react';\nimport JoblyApi from './JoblyApi';\nimport CompanyCard from './CompanyCard';\nimport { Link } from 'react-router-dom';\nimport Search from './Search';\nimport './Companies.css';\n\nconst Companies = () => {\n\tconst [ companies, setCompanies ] = useState(null);\n\n\tuseEffect(() => {\n\t\tconst getCompanies = async () => {\n\t\t\tlet companies = await JoblyApi.getAllCompanies();\n\t\t\tsetCompanies([ ...companies ]);\n\t\t};\n\t\tgetCompanies();\n\t}, []);\n\n\tconst handleSearch = async (values, { setSubmitting }) => {\n\t\tlet companies = await JoblyApi.getAllCompanies(values);\n\t\tsetCompanies([ ...companies ]);\n\t\tsetSubmitting(false);\n\t};\n\n\tif (!companies) {\n\t\treturn <h2>Loading Companies &hellip;</h2>;\n\t}\n\n\treturn (\n\t\t<div className=\"Companies\">\n\t\t\t<Search handleSearch={handleSearch} />\n\t\t\t{!companies.length ? (\n\t\t\t\t<p className=\"Companies-Sorry\">Sorry! No companies match your search</p>\n\t\t\t) : (\n\t\t\t\t<ul>\n\t\t\t\t\t{companies.map((company) => (\n\t\t\t\t\t\t<li key={company.handle}>\n\t\t\t\t\t\t\t<Link to={`/companies/${company.handle}`}>\n\t\t\t\t\t\t\t\t<CompanyCard company={company} />{' '}\n\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t))}\n\t\t\t\t</ul>\n\t\t\t)}\n\t\t</div>\n\t);\n};\n\nexport default Companies;\n","import React, { useState, useEffect } from 'react';\nimport JoblyApi from './JoblyApi';\nimport JobCard from './JobCard';\nimport Search from './Search';\nimport './Jobs.css';\n\nconst Jobs = () => {\n\tconst [ jobs, setJobs ] = useState(null);\n\n\tuseEffect(() => {\n\t\tconst getJobs = async () => {\n\t\t\tlet jobs = await JoblyApi.getAllJobs();\n\t\t\tsetJobs([ ...jobs ]);\n\t\t};\n\t\tgetJobs();\n\t}, []);\n\n\tconst handleSearch = async (values, { setSubmitting }) => {\n\t\tlet jobs = await JoblyApi.getAllJobs(values);\n\t\tsetJobs([ ...jobs ]);\n\t\tsetSubmitting(false);\n\t};\n\n\tif (!jobs) {\n\t\treturn <h2>Loading jobs &hellip;</h2>;\n\t}\n\n\treturn (\n\t\t<div className=\"Jobs\">\n\t\t\t<Search handleSearch={handleSearch} />\n\t\t\t{!jobs.length ? (\n\t\t\t\t<p className=\"Jobs-Sorry\">Sorry! No jobs match your search</p>\n\t\t\t) : (\n\t\t\t\t<ul>\n\t\t\t\t\t{jobs.map((job) => (\n\t\t\t\t\t\t<li key={job.id}>\n\t\t\t\t\t\t\t<JobCard job={job} />\n\t\t\t\t\t\t</li>\n\t\t\t\t\t))}\n\t\t\t\t</ul>\n\t\t\t)}\n\t\t</div>\n\t);\n};\n\nexport default Jobs;\n","import * as Yup from 'yup';\n\nconst loginSchema = Yup.object({\n\tusername : Yup.string().required('Required'),\n\tpassword : Yup.string().required('Required')\n});\n\nexport default loginSchema;\n","import React from 'react';\nimport { Formik, Form } from 'formik';\nimport TextInput from './TextInput';\nimport loginSchema from './LoginFormSchema';\nimport JoblyApi from '../JoblyApi';\n\nconst LoginForm = ({ doLogin }) => {\n\tconst INITIAL_VALUES = {\n\t\tusername : '',\n\t\tpassword : ''\n\t};\n\n\tconst handleLogin = async (values, { setSubmitting }) => {\n\t\tconst token = await JoblyApi.login(values);\n\t\tlocalStorage.setItem('jobly-token', token);\n\t\tsetSubmitting(false);\n\t\tdoLogin(values);\n\t};\n\n\treturn (\n\t\t<div className=\"LoginForm\">\n\t\t\t<Formik initialValues={INITIAL_VALUES} validationSchema={loginSchema} onSubmit={handleLogin}>\n\t\t\t\t<Form>\n\t\t\t\t\t<TextInput label=\"Username\" name=\"username\" type=\"text\" />\n\t\t\t\t\t<TextInput label=\"Password\" name=\"password\" type=\"password\" />\n\t\t\t\t\t<button>Submit</button>\n\t\t\t\t</Form>\n\t\t\t</Formik>\n\t\t</div>\n\t);\n};\n\nexport default LoginForm;\n","import * as Yup from 'yup';\n\nconst registrationSchema = Yup.object({\n\tusername  : Yup.string().min(5, 'Must be at least 5 characters').required('Required'),\n\tpassword  : Yup.string().min(5, 'Must be at least 5 characters').required('Required'),\n\tfirstName : Yup.string().min(1, 'Must be at least 1 character'),\n\tlastName  : Yup.string().min(1, 'Must be at least 1 character'),\n\temail     : Yup.string()\n});\n\nexport default registrationSchema;\n","import React from 'react';\nimport { Formik, Form } from 'formik';\nimport TextInput from './TextInput';\nimport registrationSchema from './registrationSchema';\nimport JoblyApi from '../JoblyApi';\n\nconst RegistrationForm = ({ doLogin }) => {\n\tconst INITIAL_VALUES = {\n\t\tusername   : '',\n\t\tpassword   : '',\n\t\tfirst_name : '',\n\t\tlast_name  : '',\n\t\temail      : ''\n\t};\n\n\tconst handleRegister = async (values, { setSubmitting }) => {\n\t\tconst token = await JoblyApi.register(values);\n\t\tlocalStorage.setItem('jobly-token', token);\n\t\tsetSubmitting(false);\n\t\tdoLogin(values);\n\t};\n\n\treturn (\n\t\t<div className=\"RegistrationForm\">\n\t\t\t<Formik initialValues={INITIAL_VALUES} validationSchema={registrationSchema} onSubmit={handleRegister}>\n\t\t\t\t<Form>\n\t\t\t\t\t<TextInput label=\"Username\" name=\"username\" type=\"text\" />\n\t\t\t\t\t<TextInput label=\"Password\" name=\"password\" type=\"password\" />\n\t\t\t\t\t<TextInput label=\"First name\" name=\"first_name\" type=\"text\" />\n\t\t\t\t\t<TextInput label=\"Last name\" name=\"last_name\" type=\"text\" />\n\t\t\t\t\t<TextInput label=\"Email\" name=\"email\" type=\"email\" />\n\t\t\t\t\t<button>Submit</button>\n\t\t\t\t</Form>\n\t\t\t</Formik>\n\t\t</div>\n\t);\n};\n\nexport default RegistrationForm;\n","import React, { useState, useContext } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport LoginForm from './forms/LoginForm';\nimport RegistrationForm from './forms/RegistrationForm';\nimport userContext from './Context';\nimport './Login.css';\n\nconst Login = () => {\n\tconst [ formView, setFormView ] = useState('login');\n\tconst { setCurrentUser } = useContext(userContext);\n\tconst history = useHistory();\n\n\tconst doLogin = (values) => {\n\t\tsetCurrentUser({ ...values });\n\t\thistory.push('/');\n\t};\n\n\tconst changeForm = (e) => {\n\t\tif (formView === 'login') {\n\t\t\tif (e.target.classList.contains('active')) return;\n\t\t\te.target.classList.toggle('active');\n\t\t\te.target.previousElementSibling.classList.toggle('active');\n\t\t\tsetFormView('register');\n\t\t} else {\n\t\t\tif (e.target.classList.contains('active')) return;\n\t\t\te.target.classList.toggle('active');\n\t\t\te.target.nextElementSibling.classList.toggle('active');\n\t\t\tsetFormView('login');\n\t\t}\n\t};\n\n\treturn (\n\t\t<div className=\"Login\">\n\t\t\t<div className=\"Login-Container\">\n\t\t\t\t<div className=\"Login-Buttons\">\n\t\t\t\t\t<button className=\"login active\" onClick={changeForm}>\n\t\t\t\t\t\tLogin\n\t\t\t\t\t</button>\n\t\t\t\t\t<button className=\"register\" onClick={changeForm}>\n\t\t\t\t\t\tRegister\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t\t{formView === 'login' ? <LoginForm doLogin={doLogin} /> : <RegistrationForm doLogin={doLogin} />}\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default Login;\n","import React, { useContext } from 'react';\nimport { Link } from 'react-router-dom';\nimport userContext from './Context';\nimport './Home.css';\n\nconst Home = () => {\n\tconst { currentUser } = useContext(userContext);\n\n\treturn (\n\t\t<div className=\"Home\">\n\t\t\t<h1>Jobly</h1>\n\t\t\t<p>All the jobs in one, convenient place.</p>\n\t\t\t{currentUser ? (\n\t\t\t\t<h2>Welcome Back!</h2>\n\t\t\t) : (\n\t\t\t\t<Link to=\"/login\">\n\t\t\t\t\t<button>Log in</button>\n\t\t\t\t</Link>\n\t\t\t)}\n\t\t</div>\n\t);\n};\n\nexport default Home;\n","import * as Yup from 'yup';\n\nconst profileSchema = Yup.object({\n\tfirst_name : Yup.string().min(1, 'Must be at least 1 characters'),\n\tlast_name  : Yup.string().min(1, 'Must be at least 1 character'),\n\temail      : Yup.string().email('Must be an email'),\n\tphoto_url  : Yup.string().url('Must be a URL'),\n\tpassword   : Yup.string().min(5, 'Must be at least 5 characters').required('Required')\n});\n\nexport default profileSchema;\n","import React, { useContext } from 'react';\nimport { Formik, Form } from 'formik';\nimport TextInput from './forms/TextInput';\nimport userContext from './Context';\nimport JoblyApi from './JoblyApi';\nimport profileSchema from './forms/profileSchema';\nimport './Profile.css';\n\nconst Profile = () => {\n\tconst { currentUser, setCurrentUser } = useContext(userContext);\n\n\tconst INITIAL_VALUES = {\n\t\tfirst_name : currentUser.first_name || '',\n\t\tlast_name  : currentUser.last_name || '',\n\t\temail      : currentUser.email || '',\n\t\tphoto_url  : currentUser.photo_url || '',\n\t\tpassword   : ''\n\t};\n\n\tconst handleSubmit = async (values, { setSubmitting, resetForm }) => {\n\t\tfor (let value in values) {\n\t\t\tif (!values[value]) delete values[value];\n\t\t}\n\t\tvalues.username = currentUser.username;\n\t\tsetSubmitting(false);\n\t\tconst user = await JoblyApi.updateUser(values);\n\t\tresetForm();\n\t\tsetCurrentUser({ ...user });\n\t};\n\n\treturn (\n\t\t<div className=\"Profile\">\n\t\t\t<h2>Profile</h2>\n\t\t\t<Formik initialValues={INITIAL_VALUES} validationSchema={profileSchema} onSubmit={handleSubmit}>\n\t\t\t\t<Form>\n\t\t\t\t\t<h4>Username</h4>\n\t\t\t\t\t<p>{currentUser.username}</p>\n\t\t\t\t\t<TextInput label=\"First name\" name=\"first_name\" type=\"text\" />\n\t\t\t\t\t<TextInput label=\"Last name\" name=\"last_name\" type=\"text\" />\n\t\t\t\t\t<TextInput label=\"Email\" name=\"email\" type=\"email\" />\n\t\t\t\t\t<TextInput label=\"Photo URL\" name=\"photo_url\" type=\"url\" />\n\t\t\t\t\t<TextInput label=\"Re-enter Password\" name=\"password\" type=\"password\" />\n\t\t\t\t\t<button type=\"submit\">Save Changes</button>\n\t\t\t\t</Form>\n\t\t\t</Formik>\n\t\t</div>\n\t);\n};\n\nexport default Profile;\n","import React from 'react';\nimport { Route, Switch, Redirect } from 'react-router-dom';\nimport Company from './Company';\nimport Companies from './Companies';\nimport Jobs from './Jobs';\nimport Login from './Login';\nimport Home from './Home';\nimport Profile from './Profile';\n\nconst Routes = ({ currentUser }) => {\n\treturn (\n\t\t<Switch>\n\t\t\t<Route exact path=\"/jobs\">\n\t\t\t\t{currentUser ? <Jobs /> : <Redirect to=\"/\" />}\n\t\t\t</Route>\n\t\t\t<Route exact path=\"/companies/:handle\">\n\t\t\t\t{currentUser ? <Company /> : <Redirect to=\"/\" />}\n\t\t\t</Route>\n\t\t\t<Route exact path=\"/companies\">\n\t\t\t\t{currentUser ? <Companies /> : <Redirect to=\"/\" />}\n\t\t\t</Route>\n\t\t\t<Route exact path=\"/login\">\n\t\t\t\t<Login />\n\t\t\t</Route>\n\t\t\t<Route exact path=\"/profile\">\n\t\t\t\t{currentUser ? <Profile /> : <Redirect to=\"/\" />}\n\t\t\t</Route>\n\t\t\t<Route exact path=\"/\">\n\t\t\t\t<Home />\n\t\t\t</Route>\n\t\t\t<Redirect path=\"/\" to=\"/\" />\n\t\t</Switch>\n\t);\n};\n\nexport default Routes;\n","import React, { useState, useEffect } from 'react';\nimport { NavLink, useHistory } from 'react-router-dom';\nimport './Navbar.css';\n\nconst Navbar = ({ currentUser, setCurrentUser }) => {\n\tconst [ isLoggedIn, setisLoggedIn ] = useState(false);\n\tconst history = useHistory();\n\n\tconst doLogout = () => {\n\t\tlocalStorage.removeItem('jobly-token');\n\t\tsetCurrentUser(null);\n\t\tsetisLoggedIn(false);\n\t\thistory.push('/');\n\t};\n\n\tuseEffect(\n\t\t() => {\n\t\t\tif (localStorage.getItem('jobly-token')) {\n\t\t\t\tsetisLoggedIn(() => true);\n\t\t\t} else {\n\t\t\t\tsetisLoggedIn(false);\n\t\t\t}\n\t\t},\n\t\t[ currentUser ]\n\t);\n\n\treturn (\n\t\t<div className=\"Navbar\">\n\t\t\t<NavLink className=\"Navbar-Brand\" to=\"/\">\n\t\t\t\tJobly\n\t\t\t</NavLink>\n\t\t\t<ul className=\"Navbar-Nav\">\n\t\t\t\t{isLoggedIn ? (\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<NavLink to=\"/companies\">Companies</NavLink>\n\t\t\t\t\t</li>\n\t\t\t\t) : null}\n\t\t\t\t{isLoggedIn ? (\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<NavLink to=\"/jobs\">Jobs</NavLink>\n\t\t\t\t\t</li>\n\t\t\t\t) : null}\n\t\t\t\t{isLoggedIn ? (\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<NavLink to=\"/profile\">Profile</NavLink>\n\t\t\t\t\t</li>\n\t\t\t\t) : null}\n\t\t\t\t<li>\n\t\t\t\t\t{isLoggedIn ? (\n\t\t\t\t\t\t<NavLink to=\"/\" onClick={doLogout} className=\"nav-logout\">\n\t\t\t\t\t\t\tLogout\n\t\t\t\t\t\t</NavLink>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<NavLink to=\"/login\" className=\"nav-login\">\n\t\t\t\t\t\t\tLogin\n\t\t\t\t\t\t</NavLink>\n\t\t\t\t\t)}\n\t\t\t\t</li>\n\t\t\t</ul>\n\t\t</div>\n\t);\n};\n\nexport default Navbar;\n","import React, { useState, useEffect } from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport Routes from './Routes';\nimport Navbar from './Navbar';\nimport './App.css';\nimport userContext from './Context';\nimport JoblyApi from './JoblyApi';\n\nfunction App() {\n\tconst [ currentUser, setCurrentUser ] = useState(null);\n\n\tuseEffect(() => {\n\t\tconst checkCurrentUser = async () => {\n\t\t\tif (localStorage.getItem('jobly-token')) {\n\t\t\t\tconst token = localStorage.getItem('jobly-token');\n\t\t\t\tconst { username, first_name, last_name, email, photo_url, jobs } = await JoblyApi.getUser(token);\n\t\t\t\tsetCurrentUser({ username, first_name, last_name, email, photo_url, jobs });\n\t\t\t}\n\t\t};\n\t\tcheckCurrentUser();\n\t}, []);\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<BrowserRouter>\n\t\t\t\t<userContext.Provider value={{ currentUser, setCurrentUser }}>\n\t\t\t\t\t<Navbar currentUser={currentUser} setCurrentUser={setCurrentUser} />\n\t\t\t\t\t<Routes currentUser={currentUser} setCurrentUser={setCurrentUser} />\n\t\t\t\t</userContext.Provider>\n\t\t\t</BrowserRouter>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}